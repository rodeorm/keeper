syntax = "proto3";

package keeper;

option go_package = "keeper/internal/grpc/proto";

service KeeperService {
    rpc Reg(RegRequest) returns (RegResponse);
    rpc Verify(VerifyRequest) returns (VerifyResponse);
    rpc Auth(AuthRequest) returns (AuthResponse);
    rpc Quit(QuitRequest) returns (QuitResponse);
    rpc CreateCouple(CreateCoupleRequest) returns (CreateCoupleResponse);
    rpc CreateCard(CreateCardRequest) returns (CreateCardResponse);
    rpc CreateBinary(CreateBinaryRequest) returns (CreateBinaryResponse);
    rpc CreateText(CreateTextRequest) returns (CreateTextResponse);
    rpc ReadAllCouples(ReadAllCouplesRequest) returns (ReadAllCouplesResponse);
    rpc ReadAllCards(ReadAllCardsRequest) returns (ReadAllCardsResponse);
    rpc ReadAllBinaries(ReadAllBinariesRequest) returns (ReadAllBinariesResponse);
    rpc ReadAllTexts(ReadAllTextsRequest) returns (ReadAllTextsResponse);
    rpc ReadCouple(ReadCoupleRequest) returns (ReadCoupleResponse);
    rpc ReadCard(ReadCardRequest) returns (ReadCardResponse);
    rpc ReadBinary(ReadBinaryRequest) returns (ReadBinaryResponse);
    rpc ReadText(ReadTextRequest) returns (ReadTextResponse);
    rpc DeleteCouple(DeleteCoupleRequest) returns (DeleteCoupleResponse);
    rpc DeleteCard(DeleteCardRequest) returns (DeleteCardResponse);
    rpc DeleteBinary(DeleteBinaryRequest) returns (DeleteBinaryResponse);
    rpc DeleteText(DeleteTextRequest) returns (DeleteTextResponse);
}

message VerifyRequest {
    string login = 1;
    string OTP = 2;
}

message VerifyResponse {
    bool verified = 1;
}


message DataType {
    enum Type {
        COUPLE = 0;
        TEXT = 1;
        BINARY = 2;
        CARD = 3;
      }
}

message Meta {
    string value = 1;
}

message Couple {
    string source = 1;
    string login  = 2;
    string password = 3;
    Meta meta = 4;
    int32 id = 5;
}

message Card {
    string cardNumber  = 1;     //16-тизначный номер (в некоторых случаях 18-тизначный — включает зашифрованную информацию о банке-эмитенте)
    string ownerName  = 2;      //Имя и фамилия владельца на латинице
	sint32 ExpMonth   = 3;      //Срок действия: месяц
	sint32 ExpYear    = 4;      //Срок действия: год
	sint32 CVC        = 5;      //CVC или CVV2 — код из 3 или 4 цифр для совершения интернет-платежей, расположенный на обратной стороне
	Meta meta = 6; 
    int32 id = 7;
}

message Binary {
    bytes bytes = 1;
    Meta meta = 2;
    int32 id = 8;
}

message Text {
    string text = 1;
    Meta meta = 2;
    int32 id = 3;
}

message User {
    string Login  = 1;   // Логин
	string Password = 2; // Пароль
	string OTP = 3;      // Одноразовый пароль
	string Name  = 4;    // Имя
	string Phone = 5;    // Номер телефона
	string Email = 6;    // Адрес электронной почты
	int64 ID       = 7;    // Уникальный идентификатор
	bool Verified = 8;   // Контактные данные подтверждены
}

//RegRequest запрос на регистрацию пользователя
message RegRequest {
   User user = 1;
}

//RegResponse ответ на регистрацию пользователя
message RegResponse {
    string message = 1;
    int64 id = 2; 
}

message AuthRequest {
    string login = 1; // логин для авторизации
    string password = 2; // пароль для авторизации
}

message AuthResponse {
    string message = 1; 
}


message CreateCoupleRequest {
    Couple couple = 1;
}

message CreateCoupleResponse{
}

message CreateCardRequest{
    Card card = 1;
}

message CreateCardResponse{
}

message CreateBinaryRequest{
    Binary binary = 1;
}

message CreateBinaryResponse{
}

message CreateTextRequest{
    Text text = 1;
}

message CreateTextResponse{
}

message ReadAllCouplesRequest{
}

message ReadAllCouplesResponse{
    repeated Couple couples  = 1;
}

message ReadAllCardsRequest{
}

message ReadAllCardsResponse{
    repeated Card cards  = 1;
}

message ReadAllBinariesRequest{
}

message ReadAllBinariesResponse{
    repeated Binary binaries  = 1;
}

message ReadAllTextsRequest{
    string login = 1;
}

message ReadAllTextsResponse{
    repeated Text texts  = 1;
}

message ReadCoupleRequest{
    Couple couple = 1;
}

message ReadCoupleResponse{
    Couple couple = 1;
}

message ReadCardRequest{
    Card card = 1;
}

message ReadCardResponse{
    Card card = 2;
}

message ReadBinaryRequest{
    string login = 1;
    Binary binary = 2;
}

message ReadBinaryResponse {
    Binary binary = 1;
}

message ReadTextRequest{
    string login = 1;
    Text text = 2;
}

message ReadTextResponse{
    Text text = 1;
}


message DeleteCoupleRequest{
    string login = 1;
    Couple couple = 2;
}

message DeleteCoupleResponse{
}

message DeleteCardRequest{
    string login = 1;
    Card card = 2;
}

message DeleteCardResponse{
}

message DeleteBinaryRequest{
    string login = 1;
    Binary binary = 2;
}

message DeleteBinaryResponse {
}

message DeleteTextRequest{
    string login = 1;
    Text text = 2;
}

message DeleteTextResponse{
}

message QuitRequest {
}

message QuitResponse {
}
