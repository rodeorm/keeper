// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rodeorm/keeper/internal/core (interfaces: CardStorager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/rodeorm/keeper/internal/core"
)

// MockCardStorager is a mock of CardStorager interface.
type MockCardStorager struct {
	ctrl     *gomock.Controller
	recorder *MockCardStoragerMockRecorder
}

// MockCardStoragerMockRecorder is the mock recorder for MockCardStorager.
type MockCardStoragerMockRecorder struct {
	mock *MockCardStorager
}

// NewMockCardStorager creates a new mock instance.
func NewMockCardStorager(ctrl *gomock.Controller) *MockCardStorager {
	mock := &MockCardStorager{ctrl: ctrl}
	mock.recorder = &MockCardStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardStorager) EXPECT() *MockCardStoragerMockRecorder {
	return m.recorder
}

// AddCardByUser mocks base method.
func (m *MockCardStorager) AddCardByUser(arg0 context.Context, arg1 *core.Card, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCardByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCardByUser indicates an expected call of AddCardByUser.
func (mr *MockCardStoragerMockRecorder) AddCardByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCardByUser", reflect.TypeOf((*MockCardStorager)(nil).AddCardByUser), arg0, arg1, arg2)
}

// DeleteCardByUser mocks base method.
func (m *MockCardStorager) DeleteCardByUser(arg0 context.Context, arg1 *core.Card, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCardByUser indicates an expected call of DeleteCardByUser.
func (mr *MockCardStoragerMockRecorder) DeleteCardByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardByUser", reflect.TypeOf((*MockCardStorager)(nil).DeleteCardByUser), arg0, arg1, arg2)
}

// SelectAllCardsByUser mocks base method.
func (m *MockCardStorager) SelectAllCardsByUser(arg0 context.Context, arg1 *core.User) ([]core.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllCardsByUser", arg0, arg1)
	ret0, _ := ret[0].([]core.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllCardsByUser indicates an expected call of SelectAllCardsByUser.
func (mr *MockCardStoragerMockRecorder) SelectAllCardsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllCardsByUser", reflect.TypeOf((*MockCardStorager)(nil).SelectAllCardsByUser), arg0, arg1)
}

// UpdateCardByUser mocks base method.
func (m *MockCardStorager) UpdateCardByUser(arg0 context.Context, arg1 *core.Card, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCardByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCardByUser indicates an expected call of UpdateCardByUser.
func (mr *MockCardStoragerMockRecorder) UpdateCardByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCardByUser", reflect.TypeOf((*MockCardStorager)(nil).UpdateCardByUser), arg0, arg1, arg2)
}
