// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rodeorm/keeper/internal/core (interfaces: BinaryStorager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/rodeorm/keeper/internal/core"
)

// MockBinaryStorager is a mock of BinaryStorager interface.
type MockBinaryStorager struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryStoragerMockRecorder
}

// MockBinaryStoragerMockRecorder is the mock recorder for MockBinaryStorager.
type MockBinaryStoragerMockRecorder struct {
	mock *MockBinaryStorager
}

// NewMockBinaryStorager creates a new mock instance.
func NewMockBinaryStorager(ctrl *gomock.Controller) *MockBinaryStorager {
	mock := &MockBinaryStorager{ctrl: ctrl}
	mock.recorder = &MockBinaryStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryStorager) EXPECT() *MockBinaryStoragerMockRecorder {
	return m.recorder
}

// AddBinaryByUser mocks base method.
func (m *MockBinaryStorager) AddBinaryByUser(arg0 context.Context, arg1 *core.Binary, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBinaryByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBinaryByUser indicates an expected call of AddBinaryByUser.
func (mr *MockBinaryStoragerMockRecorder) AddBinaryByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBinaryByUser", reflect.TypeOf((*MockBinaryStorager)(nil).AddBinaryByUser), arg0, arg1, arg2)
}

// DeleteBinaryByUser mocks base method.
func (m *MockBinaryStorager) DeleteBinaryByUser(arg0 context.Context, arg1 *core.Binary, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinaryByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBinaryByUser indicates an expected call of DeleteBinaryByUser.
func (mr *MockBinaryStoragerMockRecorder) DeleteBinaryByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinaryByUser", reflect.TypeOf((*MockBinaryStorager)(nil).DeleteBinaryByUser), arg0, arg1, arg2)
}

// SelectAllBinariesByUser mocks base method.
func (m *MockBinaryStorager) SelectAllBinariesByUser(arg0 context.Context, arg1 *core.User) ([]core.Binary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllBinariesByUser", arg0, arg1)
	ret0, _ := ret[0].([]core.Binary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllBinariesByUser indicates an expected call of SelectAllBinariesByUser.
func (mr *MockBinaryStoragerMockRecorder) SelectAllBinariesByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllBinariesByUser", reflect.TypeOf((*MockBinaryStorager)(nil).SelectAllBinariesByUser), arg0, arg1)
}

// SelectBinaryByUser mocks base method.
func (m *MockBinaryStorager) SelectBinaryByUser(arg0 context.Context, arg1 *core.Binary, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBinaryByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectBinaryByUser indicates an expected call of SelectBinaryByUser.
func (mr *MockBinaryStoragerMockRecorder) SelectBinaryByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBinaryByUser", reflect.TypeOf((*MockBinaryStorager)(nil).SelectBinaryByUser), arg0, arg1, arg2)
}

// UpdateBinaryByUser mocks base method.
func (m *MockBinaryStorager) UpdateBinaryByUser(arg0 context.Context, arg1 *core.Binary, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinaryByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBinaryByUser indicates an expected call of UpdateBinaryByUser.
func (mr *MockBinaryStoragerMockRecorder) UpdateBinaryByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinaryByUser", reflect.TypeOf((*MockBinaryStorager)(nil).UpdateBinaryByUser), arg0, arg1, arg2)
}
