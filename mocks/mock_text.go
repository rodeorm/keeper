// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rodeorm/keeper/internal/core (interfaces: TextStorager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/rodeorm/keeper/internal/core"
)

// MockTextStorager is a mock of TextStorager interface.
type MockTextStorager struct {
	ctrl     *gomock.Controller
	recorder *MockTextStoragerMockRecorder
}

// MockTextStoragerMockRecorder is the mock recorder for MockTextStorager.
type MockTextStoragerMockRecorder struct {
	mock *MockTextStorager
}

// NewMockTextStorager creates a new mock instance.
func NewMockTextStorager(ctrl *gomock.Controller) *MockTextStorager {
	mock := &MockTextStorager{ctrl: ctrl}
	mock.recorder = &MockTextStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextStorager) EXPECT() *MockTextStoragerMockRecorder {
	return m.recorder
}

// AddTextByUser mocks base method.
func (m *MockTextStorager) AddTextByUser(arg0 context.Context, arg1 *core.Text, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTextByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTextByUser indicates an expected call of AddTextByUser.
func (mr *MockTextStoragerMockRecorder) AddTextByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextByUser", reflect.TypeOf((*MockTextStorager)(nil).AddTextByUser), arg0, arg1, arg2)
}

// DeleteTextByUser mocks base method.
func (m *MockTextStorager) DeleteTextByUser(arg0 context.Context, arg1 *core.Text, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTextByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTextByUser indicates an expected call of DeleteTextByUser.
func (mr *MockTextStoragerMockRecorder) DeleteTextByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTextByUser", reflect.TypeOf((*MockTextStorager)(nil).DeleteTextByUser), arg0, arg1, arg2)
}

// SelectAllTextsByUser mocks base method.
func (m *MockTextStorager) SelectAllTextsByUser(arg0 context.Context, arg1 *core.User) ([]core.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllTextsByUser", arg0, arg1)
	ret0, _ := ret[0].([]core.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllTextsByUser indicates an expected call of SelectAllTextsByUser.
func (mr *MockTextStoragerMockRecorder) SelectAllTextsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllTextsByUser", reflect.TypeOf((*MockTextStorager)(nil).SelectAllTextsByUser), arg0, arg1)
}

// UpdateTextByUser mocks base method.
func (m *MockTextStorager) UpdateTextByUser(arg0 context.Context, arg1 *core.Text, arg2 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTextByUser indicates an expected call of UpdateTextByUser.
func (mr *MockTextStoragerMockRecorder) UpdateTextByUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextByUser", reflect.TypeOf((*MockTextStorager)(nil).UpdateTextByUser), arg0, arg1, arg2)
}
